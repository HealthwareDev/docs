{
  "openapi": "3.0.0",
  "info": {
    "title": "Healthware.dev API Collection",
    "version": "1.0.0",
    "description": "### Welcome to Postman! This is your first collection. \n\nCollections are your starting point for building and testing APIs. You can use this one to:\n\n• Group related requests\n• Test your API in real-world scenarios\n• Document and share your requests\n\nUpdate the name and overview whenever you’re ready to make it yours.\n\n[Learn more about Postman Collections.](https://learning.postman.com/docs/collections/collections-overview/)"
  },
  "servers": [
    {
      "url": "api.healthware.dev"
    }
  ],
  "paths": {
    "/api/integrations/token": {
      "parameters": [],
      "post": {
        "summary": "Authenticate a user (Managed Flow)",
        "parameters": [
          {
            "name": "dev-id",
            "in": "header",
            "required": true,
            "example": "d2e18023-ba16-4d80-beee-7c3b2f00b517",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "example": "key_jB7Biq6VXkaB7SQ98YPhkMS13e9b13yU",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Date": {
                "schema": {
                  "type": "string"
                },
                "example": "Mon, 07 Jul 2025 00:03:52 GMT"
              },
              "Ngrok-Agent-Ips": {
                "schema": {
                  "type": "integer"
                },
                "example": "2a01:4b00:bc02:2a00:4143:9142:46b0:e677"
              },
              "Vary": {
                "schema": {
                  "type": "string"
                },
                "example": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch"
              },
              "Transfer-Encoding": {
                "schema": {
                  "type": "string"
                },
                "example": "chunked"
              }
            },
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "integrations_url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "expires_in": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "developer_user_id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
   "paths": {
    "/api/chat": {
      "post": {
        "summary": "Natural Language Query (NLQ)",
        "operationId": "postChat",
        "tags": ["Chat"],

        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" },
            "description": "Your API key"
          },
          {
            "name": "dev-id",
            "in": "header",
            "required": true,
            "schema": { "type": "string" },
            "description": "Your developer account ID"
          }
        ],

        /* ────────────────────────
           1. Request body
           ──────────────────────── */
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_connection_id": {
                    "type": "string",
                    "description": "ID returned by the integrations flow"
                  },
                  "prompt": {
                    "type": "string",
                    "description": "The natural-language question to ask"
                  },
                  "model_provider": { "type": "string" },
                  "model_name":     { "type": "string" },

                  /* <── callers can drop _any_ SchemaDescriptor here ──> */
                  "schema": { "$ref": "#/components/schemas/SchemaDescriptor" }
                },
                "required": [
                  "user_connection_id",
                  "prompt",
                  "model_provider",
                  "model_name",
                  "schema"
                ],
                "description": "Payload sent to POST /api/chat"
              }
            }
          }
        },

        /* ────────────────────────
           2. Success response
           ──────────────────────── */
        "responses": {
          "200": {
            "description": "Successful NLQ response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_connection_id": { "type": "string" },

                    /* <── `data` can be ANY shape ──> */
                    "data": {
                      "type": "object",
                      "description":
                        "Arbitrary structure matching the caller-supplied descriptor",
                      "additionalProperties": true
                    }
                  },
                  "required": ["user_connection_id", "data"]
                }
              }
            }
          }
        }
      }
    }
  },

  /* ───────────────────────────────
     3. Re-usable SchemaDescriptor
     ─────────────────────────────── */
  "components": {
    "schemas": {
      "SchemaDescriptor": {
        "oneOf": [
          { "$ref": "#/components/schemas/SD_String" },
          { "$ref": "#/components/schemas/SD_Number" },
          { "$ref": "#/components/schemas/SD_Boolean" },
          { "$ref": "#/components/schemas/SD_Array" },
          { "$ref": "#/components/schemas/SD_Object" }
        ],
        "description":
          "Discriminated-union descriptor used both as NLQ 'schema' and elsewhere"
      },

      /* ── primitives ────────────────────── */
      "SD_String": {
        "type": "object",
        "properties": {
          "type": { "const": "string" },
          "description": { "type": "string" }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "SD_Number": {
        "type": "object",
        "properties": {
          "type": { "const": "number" },
          "description": { "type": "string" }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "SD_Boolean": {
        "type": "object",
        "properties": {
          "type": { "const": "boolean" },
          "description": { "type": "string" }
        },
        "required": ["type"],
        "additionalProperties": false
      },

      /* ── recursive containers ──────────── */
      "SD_Array": {
        "type": "object",
        "properties": {
          "type": { "const": "array" },
          "items": { "$ref": "#/components/schemas/SchemaDescriptor" },
          "description": { "type": "string" }
        },
        "required": ["type", "items"],
        "additionalProperties": false
      },
      "SD_Object": {
        "type": "object",
        "properties": {
          "type": { "const": "object" },
          "properties": {
            "type": "object",
            "description":
              "Map of property names → SchemaDescriptor values",
            "additionalProperties": {
              "$ref": "#/components/schemas/SchemaDescriptor"
            }
          },
          "description": { "type": "string" }
        },
        "required": ["type", "properties"],
        "additionalProperties": false
      }
    }
  }
    "/api/biomarker/sleep": {
      "parameters": [],
      "get": {
        "summary": "Sleep Biomarker",
        "parameters": [
          {
            "name": "user_connection_id",
            "in": "query",
            "required": true,
            "description": "Id for a wearable connection",
            "example": "739e5a24-4859-4ff9-b42b-ab27744c62c9",
            "schema": {
              "deprecated": false,
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "Timestamp marking the earliest possible point when the biomarker event could have taken place.",
            "example": "2025-07-09T00:00:00Z",
            "schema": {
              "deprecated": false,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "Timestamp marking the latest possible point when the biomarker event could have taken place.",
            "example": "2025-07-12T00:00:00Z",
            "schema": {
              "deprecated": false,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "example": "key_jB7Biq6VXkaB7SQ98YPhkMS13e9b13yU",
            "schema": {
              "deprecated": false
            }
          },
          {
            "name": "dev-id",
            "in": "header",
            "required": false,
            "example": "d2e18023-ba16-4d80-beee-7c3b2f00b517",
            "schema": {
              "deprecated": false
            }
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Date": {
                "schema": {
                  "type": "string"
                },
                "example": "Sat, 12 Jul 2025 16:52:33 GMT"
              },
              "Ngrok-Agent-Ips": {
                "schema": {
                  "type": "integer"
                },
                "example": "2a01:4b00:bc02:2a00:3946:3ed:f9e7:438e"
              },
              "Vary": {
                "schema": {
                  "type": "string"
                },
                "example": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch"
              },
              "Transfer-Encoding": {
                "schema": {
                  "type": "string"
                },
                "example": "chunked"
              }
            },
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_connection_id": {
                      "type": "string"
                    },
                    "provider": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "time_in_bed": {
                            "type": "integer"
                          },
                          "light_sleep": {
                            "type": "integer"
                          },
                          "deep_sleep": {
                            "type": "integer"
                          },
                          "rem_sleep": {
                            "type": "integer"
                          },
                          "awake": {
                            "type": "integer"
                          },
                          "sleep_debt": {
                            "type": "integer"
                          },
                          "sleep_efficiency": {
                            "type": "number"
                          },
                          "sleep_score": {
                            "type": "integer"
                          },
                          "sleep_start": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "sleep_end": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "out_of_bed_time": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "sleep_interruptions": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/biomarker/readiness": {
      "parameters": [],
      "get": {
        "summary": "Readiness Biomarker",
        "parameters": [
          {
            "name": "user_connection_id",
            "in": "query",
            "required": true,
            "description": "Id for a wearable connection",
            "example": "739e5a24-4859-4ff9-b42b-ab27744c62c9",
            "schema": {
              "deprecated": false,
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "Timestamp marking the earliest possible point when the biomarker event could have taken place.",
            "example": "2025-07-09T00:00:00Z",
            "schema": {
              "deprecated": false,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "Timestamp marking the latest possible point when the biomarker event could have taken place.",
            "example": "2025-07-12T00:00:00Z",
            "schema": {
              "deprecated": false,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "example": "key_jB7Biq6VXkaB7SQ98YPhkMS13e9b13yU",
            "schema": {
              "deprecated": false
            }
          },
          {
            "name": "dev-id",
            "in": "header",
            "required": false,
            "example": "d2e18023-ba16-4d80-beee-7c3b2f00b517",
            "schema": {
              "deprecated": false
            }
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Date": {
                "schema": {
                  "type": "string"
                },
                "example": "Sat, 12 Jul 2025 16:52:04 GMT"
              },
              "Ngrok-Agent-Ips": {
                "schema": {
                  "type": "integer"
                },
                "example": "2a01:4b00:bc02:2a00:3946:3ed:f9e7:438e"
              },
              "Vary": {
                "schema": {
                  "type": "string"
                },
                "example": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch"
              },
              "Transfer-Encoding": {
                "schema": {
                  "type": "string"
                },
                "example": "chunked"
              }
            },
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_connection_id": {
                      "type": "string"
                    },
                    "provider": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "hrv": {
                            "type": "number"
                          },
                          "resting_heart_rate": {
                            "type": "integer"
                          },
                          "skin_temperature": {
                            "type": "number"
                          },
                          "readiness_score": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/oauth/authorize/whoop": {
      "parameters": [],
      "post": {
        "summary": "Authenticate a user (Manual Flow)",
        "parameters": [
          {
            "name": "dev-id",
            "in": "header",
            "required": true,
            "example": "d2e18023-ba16-4d80-beee-7c3b2f00b517",
            "schema": {
              "deprecated": false
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "example": "key_jB7Biq6VXkaB7SQ98YPhkMS13e9b13yU",
            "schema": {
              "deprecated": false
            }
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "example": "application/json"
              },
              "Date": {
                "schema": {
                  "type": "string"
                },
                "example": "Sun, 06 Jul 2025 17:56:23 GMT"
              },
              "Ngrok-Agent-Ips": {
                "schema": {
                  "type": "integer"
                },
                "example": "2a01:4b00:bc02:2a00:11a1:2042:144d:9961"
              },
              "Vary": {
                "schema": {
                  "type": "string"
                },
                "example": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch"
              },
              "Transfer-Encoding": {
                "schema": {
                  "type": "string"
                },
                "example": "chunked"
              }
            },
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authorization_url": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                }
              }
            }
          }
        },
         "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "developer_user_id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}